{"version":3,"sources":["textBox.js","userEntry.js","info.js","rooms.js","items.js","setDressing.js","pickups.js","App.js","serviceWorker.js","index.js"],"names":["TextBox","_ref","roomName","currentRoom","react_default","a","createElement","className","UserEntry","userInput","handleInput","submitChoice","parseEntry","placeholder","onChange","value","onClick","Info","confirmedUserChoice","resultMessage","rooms","roomId","title","description","pickups","obstacles","setDressing","light","north","south","west","east","up","down","name","roomFound","description1","descriptionSolved","failedAction","solvedAction","solves","solved","failIsHarmful","inInventory","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inventory","currentRoomText","compileInitialRoomDescription","health","alive","resetRooms","slice","resetObstacles","resetSetDressing","resetPickups","bind","assertThisInitialized","changeRoom","validMoveCheck","event","setState","target","console","log","input","room","currentAction","currentSubject","currentObject","commandArray","split","toLowerCase","length","restartGame","get","check","use","direction","_this2","validMove","i","compileRoomDescription","obstacleMessage","hasOwnProperty","checkBlock","subject","includes","object","_this3","subjectInInventory","objectInRoom","objectInInventory","validSolution","checkSolution","alterObstacleState","newRoomText","checkHarm","_this4","itemGot","concat","toConsumableArray","pickUpMessage","alterPickupState","itemsArray","splice","_loop","j","pickupName","x","y","itemIndex","newValue","callback","descriptionText","validDirections","directions","isBlocked","healthLeft","src_textBox","src_info","src_userEntry","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ff3df4a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './textBox.css';\n\n\nconst TextBox = function ({roomName, currentRoom}) {\n    return (\n    <div className=\"textBox\">\n      <p>{roomName}:</p>\n      <p>{currentRoom}</p>\n    </div>\n    );\n};\n\nexport default TextBox;\n","import React, { Component } from 'react';\nimport './userEntry.css';\n\n\nconst UserEntry = function({ userInput, handleInput, submitChoice, parseEntry }) {\n    return (\n    <div className=\"UserEntry\">\n      <input className=\"UserInput\" placeholder=\"Please enter command here\" onChange={handleInput} value={userInput}></input>\n      <button onClick={submitChoice} >DO IT</button>\n    </div>\n    );\n};\n\nexport default UserEntry;\n","import React, { Component } from 'react';\nimport './info.css';\n\n\nconst Info = function ({confirmedUserChoice, resultMessage}) {\n    return (\n    <div className=\"info\">\n      <p>{confirmedUserChoice}</p>\n      <p>{resultMessage}</p>\n    </div>\n    );\n};\n\nexport default Info;\n","var rooms = [\n  {\n    roomId: \"55\",\n    title: \"Cell\",\n    description: \"A dingy cell with thick stone walls, where you awoke.\",\n    pickups: [\"torch\", \"key\"],\n    obstacles: [\"door\"],\n    setDressing: [\"note\"],\n    light: \"lit\",\n    north: [\"54\", \"door\", \"a threshold\", \"a locked door\", \"an unlocked and open door\"],\n    south: [\"NA\", \"NA\"],\n    west: [\"NA\", \"NA\"],\n    east: [\"NA\", \"NA\"],\n    up: [\"NA\", \"NA\"],\n    down: [\"NA\", \"NA\"],\n  },\n  {\n    roomId: \"54\",\n    title: \"Prison hall\",\n    description: \"A stone hallway that connects the two cells in the prison to what you hope is the outside.\",\n    pickups: [],\n    obstacles: [\"rock\"],\n    setDressing: [\"note\"],\n    light: \"lit\",\n    north: [\"53\", \"rock\", \"an unlocked and open door\", \"a giant rock\", \"little fragments of rock\"],\n    south: [\"55\", \"NA\", \"the open door to the cell you awoke in\", \"NA\", \"the open door to the cell you awoke in\"],\n    west: [\"44\", \"NA\", \"an unlocked and open door\", \"NA\", \"NA\"],\n    east: [\"NA\", \"NA\"],\n    up: [\"NA\", \"NA\"],\n    down: [\"NA\", \"NA\"]\n  },\n  {\n    roomId: \"44\",\n    title: \"Another prison cell\",\n    description: \"This stone cell isn't as nice as the one you woke up in. For one thing, yours didn't have a body in the corner. Well, aside from your own, which was still alive. You decide resolutely not to interact with the body, so don't even try it.\",\n    pickups: [\"pickaxe\"],\n    obstacles: [\"\"],\n    setDressing: [\"body\"],\n    light: \"lit\",\n    north: [\"NA\", \"NA\"],\n    south: [\"NA\", \"NA\"],\n    west: [\"NA\", \"NA\"],\n    east: [\"54\", \"NA\", \"an open door to the prison hall\"],\n    up: [\"NA\", \"NA\"],\n    down: [\"NA\", \"NA\"]\n  },\n  {\n    roomId: \"53\",\n    title: \"Outside the prison\",\n    description: \"A small clearing outside the prison. Definitely more open than the prison.\",\n    pickups: [],\n    obstacles: [],\n    setDressing: [],\n    light: \"lit\",\n    north: [\"NA\", \"NA\"],\n    south: [\"54\", \"NA\", \"an open door to the prison hall\"],\n    west: [\"NA\", \"NA\"],\n    east: [\"43\", \"NA\", \"the town gate\"],\n    up: [\"NA\", \"NA\"],\n    down: [\"NA\", \"NA\"]\n  },\n  {\n    roomId: \"43\",\n    title: \"Town gate\",\n    description: \"The way out of town.\",\n    pickups: [\"\"],\n    obstacles: [\"\"],\n    setDressing: [\"sign\"],\n    light: \"lit\",\n    north: [\"NA\", \"NA\"],\n    south: [\"NA\", \"NA\"],\n    west: [\"53\", \"outside the prison\"],\n    east: [\"42\", \"NA\", \"a road\"],\n    up: [\"NA\", \"NA\"],\n    down: [\"NA\", \"NA\"]\n  }\n]\n\nexport default rooms;\n","var obstacles = [\n  {\n    name: \"door\",\n    roomFound: \"55\",\n    description1: \"a heavy wooden door, too strong to break down and locked with a heavy padlock. You're pretty sure it's also enchanted. And by enchanted, you mean 'dangerously cursed'.\",\n    descriptionSolved: \"a heavy wooden door, now unlocked and open.\",\n    failedAction: \"The door remains unopened, and you are struck by a magical force. It's definitely dangerously cursed.\",\n    solvedAction: \"With a creak, the door swings open.\",\n    solves: \"key\",\n    solved: false,\n    failIsHarmful: true\n  },\n  {\n    name: \"darkness\",\n    roomFound: \"55\",\n    description1: \"an inky void of pure blackness so thick you can't even see your hand in front of your face. Not that putting your hand right in front of your face makes it any easier to see the area.\",\n    descriptionSolved: \"a complete lack of darkness. You're just staring into thin air.\",\n    failedAction: \"It's still dark.\",\n    solvedAction: \"The darkness recedes.\",\n    solves: \"torch\",\n    solved: false,\n    failIsHarmful: false\n  },\n  {\n    name: \"rock\",\n    roomFound: \"54\",\n    description1: \"a big lump of what you think is granite. It definitely looks igneous to you, and felsic too. Not to mention how phaneritic it is. Must be granite. Anyway, it's too heavy to move, and it's right in your way.\",\n    descriptionSolved: \"little shards of the felsic phaneritic igneous rock that you're sure was granite scattered on the floor.\",\n    failedAction: \"The rock resists your efforts. Maybe that would have worked on a sedimentary rock, but this thing is igneous.\",\n    solvedAction: \"The rock explodes into shards as the pick hits it. The crystals that fly out as you strike it are definitely macroscopic. You're now even more certain that it's granite, but it doesn't really matter now.\",\n    solves: \"pickaxe\",\n    solved: false,\n    failIsHarmful: false\n  },\n  {\n    name: \"orc\",\n    roomFound: \"53\",\n    description1: \"a gigantic orc who flexes his muscles at you menacingly as he bars your way. You feel inadequate and jealous.\",\n    descriptionSolved: \"a dead orc. Your disproportionate surge of macho pride is marred slightly by the realisation that you should probably get out of here before his friends or the police arrive.\",\n    failedAction: \"The orc laughs at your attempt and pushes you away with what it thinks is a gentle shove. You're pretty sure that the so-called 'gentle shove' fractured a couple of ribs, but you pretend that it did nothing because you don't want to look weak in front of this hulking mass of muscle.\",\n    solvedAction: \"No matter how well-defined, a six-pack is really no defense against a crossbow bolt at close range. The orc collapses.\",\n    solves: \"crossbow\",\n    solved: false,\n    failIsHarmful: true\n  },\n  {\n    name: \"kobold\",\n    roomFound: \"53\",\n    description1: \"a creature that basically just like a gnome, but with a cooler name drawn from Germanic folklore. It looks angry at you.\",\n    descriptionSolved: \"A dead gnome.\",\n    failedAction: \"The gnome bites your knee.\",\n    solvedAction: \"No matter how well-defined, a six-pack is really no defense against a crossbow bolt at close range. The orc collapses.\",\n    solves: \"crossbow\",\n    solved: false,\n    failIsHarmful: true\n  }\n]\n\nexport default obstacles;\n","var setDressing = [\n  {\n    name: \"note\",\n    roomFound: \"55\",\n    description: \"The note reads 'Prisoner 24602 has been imprisoned for 45 years for drunken misconduct.'. That does explain the pounding headache that you've woken up with.\",\n  },\n  {\n    name: \"body\",\n    roomFound: \"44\",\n    description: \"You stared at the body like the absolute ghoul that you are. Show some respect.\",\n  },\n  {\n    name: \"note\",\n    roomFound: \"54\",\n    description: \"The note reads 'By order of Grimloth the Wise, this prison has been escalated to a maximum maximum security facility'. That does explain the big rock.\",\n  },\n  {\n    name: \"sign\",\n    roomFound: \"43\",\n    description: \"The sign reads 'You are now leaving Elfsburgh. Ride safely.'\",\n  },\n]\n\nexport default setDressing;\n","\nvar pickups = [\n  {\n    name: \"torch\",\n    roomFound: \"55\",\n    description1: \"a torch, which can be used to light the way. It looks like the kind that is always lit and never runs out. Merlon's Magic Torch Emporium makes good torches.\",\n    failedAction: \"The area was already lit. \",\n    solvedAction: \"The torch lights up. \",\n    solves: \"darkness\",\n    inInventory: false\n  },\n  {\n    name: \"pickaxe\",\n    roomFound: \"44\",\n    description1: \"a pickaxe with a wooden handle, used for picking. An inscription reads 'This belongs to Steve, hands off'. There's a dark mark on it that looks like an oddly angular bloodstain. Best not think too hard about that.\",\n    failedAction: \"You can't pick this. \",\n    solvedAction: \"You swing the pick. \",\n    solves: \"rock\",\n    inInventory: false\n  },\n  {\n    name: \"key\",\n    roomFound: \"55\",\n    description1: \"a heavy key designed to unlock a nearby lock. This is handy because if you had a lockpicking skill stat, it would be zero.\",\n    failedAction: \"This key doesn't fit that. \",\n    solvedAction: \"You use the key in the lock. \",\n    solves: \"door\",\n    inInventory: false\n  },\n  {\n    name: \"wand\",\n    roomFound: \"55\",\n    description: \"A magic wand put in by a programmer for testi- I mean, by a wizard to help you achieve your mystical destiny. It can do anything.\",\n    failedAction: \"This never fails.\",\n    solvedAction: \"You wave the wand. \",\n    solves: [\"door\", \"rock\", \"orc\", \"darkness\"],\n    inInventory: false\n  },\n  {\n\n  }\n\n]\n\nexport default pickups ;\n","import React, { Component } from 'react';\nimport './App.css';\nimport TextBox from './textBox.js';\nimport UserEntry from './userEntry.js';\nimport Info from './info.js';\n// import { parseEntry, changeRoom, validMoveCheck } from './supportingFunctions.js'\nimport rooms from './rooms.js';\nimport obstacles from './items.js';\nimport setDressing from './setDressing.js';\nimport pickups from './pickups.js';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentRoom: rooms[0],\n      userInput: '',\n      confirmedUserChoice: '',\n      resultMessage: \"Welcome to React Quest! Enter your commands below. Enter 'get [thing]' to pick a usable item up, 'go [direction]' to move, 'check [thing]' to examine an obstacle or item, or 'use [thing a] on [thing b]' to resolve obstacles.\",\n      inventory: [],\n      currentRoomText: this.compileInitialRoomDescription(rooms[0]),\n      health: 3,\n      alive: true,\n      resetRooms: rooms.slice(),\n      resetObstacles: obstacles.slice(),\n      resetSetDressing: setDressing.slice(),\n      resetPickups: pickups.slice()\n    };\n\n\n  this.handleInput = this.handleInput.bind(this);\n  this.submitChoice = this.submitChoice.bind(this);\n  this.parseEntry = this.parseEntry.bind(this);\n  this.changeRoom = this.changeRoom.bind(this);\n  this.validMoveCheck = this.validMoveCheck.bind(this);\n  }\n\n  ///////////////////////////////////////////////////////////////////\n  // PARSE USER INPUTS  /////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////\n\n  //USER ENTERS TEXT\n  handleInput (event) {\n      this.setState({ userInput: event.target.value });\n      // console.log(this.state.userInput);\n  }\n\n  //USER CONFIRMS CHOICE\n  submitChoice (event) {\n    //For test's sake: print command\n    console.log(\"current command is: \" + this.state.userInput);\n    this.setState({confirmedUserChoice: this.state.userInput });\n    this.parseEntry(this.state.userInput, this.state.currentRoom);\n    //Clear the textbox\n  }\n\n  //ENTRY IS PARSED INTO ACTIONS\n  parseEntry(input, room) {\n    console.log(\"state at parseEntry:\");\n    console.log(this.state.currentRoom);\n    var currentAction;\n    var currentSubject;\n    var currentObject;\n\n    //Break down the user's command\n    var commandArray = input.split(\" \");\n    console.log(commandArray);\n\n    //Get verb\n    currentAction = commandArray[0].toLowerCase();\n\n  if (this.state.alive === true){\n    //Get thing to do verb on\n    //Deal with edge cases in user entry\n    if (commandArray.length === 1 || commandArray[1] === \"\"){\n      if (currentAction === \"go\"){\n        this.setState({ resultMessage: currentAction + \" where?\" });\n        return;\n      }\n      else if (currentAction === \"use\") {\n        this.setState({ resultMessage: currentAction + \" what on what?\" });\n        return;\n      }\n      else if (currentAction === \"\"){\n        this.setState({ resultMessage: currentAction + \"You did nothing.\" });\n        return;\n      }\n      else if (currentAction === \"restart\"){\n        this.restartGame();\n        return;\n      }\n      else {\n        this.setState({ resultMessage: currentAction + \" what?\" });\n        return;\n      }\n    }\n    else if (commandArray.length <= 2){\n      if (commandArray[1] === \"the\"){\n        currentSubject = commandArray[2].toLowerCase();\n      }\n      else {\n          currentSubject = commandArray[1].toLowerCase();\n      }\n    }\n    else {\n      if (commandArray[1] === \"the\"){\n        currentSubject = commandArray[2].toLowerCase();\n        currentObject = commandArray[4].toLowerCase();\n      }\n      else {\n          currentSubject = commandArray[1].toLowerCase();\n          currentObject = commandArray[3].toLowerCase();\n      }\n    }\n\n\n    console.log(currentAction + \" : \" + currentSubject + \":\" + currentObject);\n\n    //Activate a function depending on the user's command - add contingency for command array being at least two words\n    if (currentAction === \"go\") {\n      this.changeRoom(currentSubject, room);\n    }\n    else if (currentAction === \"get\"){\n      this.get(currentSubject, room);\n    }\n    else if (currentAction === \"check\"){\n      this.check(currentSubject, room);\n    }\n    else if (currentAction === \"use\"){\n      this.use(currentSubject, currentObject, room);\n    }\n    //for anything else - all are invalid\n    else {\n      this.setState({resultMessage: \"You give it your best try, but find that you can't do this.\"});\n    }\n  }\n  else if (this.state.alive === false){\n      if (currentAction === \"restart\") {\n        this.restartGame();\n      }\n      else {\n        this.setState({resultMessage: \"You are too dead to do this. Type 'restart' to try again.\"});\n      }\n  }\n  //End of parse function\n}\n\n/////////////////////////////////////////////////////\n// MOVE  ////////////////////////////////////////////\n/////////////////////////////////////////////////////\nchangeRoom(direction, room) {\n  //check if direction is valid AND UNBLOCKED\n  let validMove = this.validMoveCheck(direction, room);\n  //Valid path - go to next room\n  if (validMove[0] === \"valid\"){\n    console.log(\"can go this way\");\n    //Scan room array for room and update room state\n    console.log(\"changing room to \" + direction);\n    for (let i = 0; i < rooms.length; i++){\n      if (room[direction][0] === rooms[i].roomId){\n        console.log(rooms[i].roomId);\n        console.log(rooms[i].description);\n          //Update room state - include callback to ensure that reliant function only executes after the state is updated\n          this.setState({currentRoom: rooms[i]}, () => {\n            console.log(this.state.currentRoom);\n            this.setState({resultMessage: \"You moved on\"});\n            this.compileRoomDescription(this.state.currentRoom);\n          });\n\n      }\n    }\n  }\n  //Blocked path - explain blockage\n  else if (validMove[0] === \"blocked\"){\n      //search for blockage reason - if not solved, then display reason\n      let obstacleMessage = \"Before this path lies \" + validMove[1];\n      this.setState({resultMessage: obstacleMessage});\n  }\n  else if (validMove[0] === \"invalid\") {\n    console.log(\"can't go this way\");\n    this.setState({resultMessage: \"You can't go this way\"});\n  }\n}\n\nvalidMoveCheck (direction, room) {\n  //invalid direction (no valid exit, or a term that isn't even a direction)\n    if (!room.hasOwnProperty(direction) || room[direction][0] === \"NA\"){\n    return [\"invalid\"];\n  }\n  //Blocked path\n  else if (room[direction][1] !== \"NA\"){\n    let obstacle = this.checkBlock(direction, room);\n    return obstacle;\n  }\n  //Valid path\n  else return [\"valid\"];\n}\n\n checkBlock (direction, room) {\n   //check the obstacles array for the name matching the assigned obstacles\n   //and pass back the relevant description\n   console.log(\"In checkBlock, direction is : \" + direction);\n   console.log(\"In checkBlock, room is : \");\n   console.log(\"In checkBlock, direction is : \" + direction);\n   for (let i = 0; i < obstacles.length; i++){\n     if (obstacles[i].name === room[direction][1] && obstacles[i].solved === false){\n       return [\"blocked\", obstacles[i].description1];\n     }\n     else if (obstacles[i].name === room[direction][1] && obstacles[i].solved === true){\n       return [\"valid\", obstacles[i].descriptionSolved];\n     }\n   }\n }\n\n///////////////////////////////////////////////////////\n// LOOK ///////////////////////////////////////////////\n///////////////////////////////////////////////////////\ncheck(subject, room) {\n  console.log(room.setDressing);\n//check if the object is in the room and check if it has been solved\n  if (room.obstacles.includes(subject)){\n      for (let i = 0; i < obstacles.length; i++){\n        //display a message depending on whether it has been solved\n        if (obstacles[i].name === subject && room.roomId === obstacles[i].roomFound){\n          if (obstacles[i].solved === false) {\n            this.setState({ resultMessage: \"You see \" + obstacles[i].description1 });\n          }\n          else {\n            this.setState({ resultMessage: \"You see \" + obstacles[i].descriptionSolved });\n          }\n        }\n      }\n  }\n  else if (room.setDressing.includes(subject)){\n    console.log(\"subject is in room\");\n      for (let i = 0; i < setDressing.length; i++){\n        if (setDressing[i].name === subject && room.roomId === setDressing[i].roomFound){\n          this.setState({ resultMessage: setDressing[i].description });\n        }\n      }\n  }\n  else if (room.pickups.includes(subject)){\n      for (let i = 0; i < pickups.length; i++){\n        if (pickups[i].name === subject && room.roomId === pickups[i].roomFound){\n          this.setState({ resultMessage: \"You see \" + pickups[i].description1 });\n        }\n      }\n  }\n  //ADD CONDITION TO CHECK INVENTORY FOR OBJECT\n  //ADD CONDITION TO CHECK INVENTORY\n  else if (subject === \"inventory\"){\n      if (this.state.inventory.length > 0){\n        this.setState({ resultMessage: this.state.inventory });\n      }\n      else {\n        this.setState({ resultMessage: \"Your pockets are empty.\"});\n      }\n  }\n  else {\n    this.setState({ resultMessage: \"You don't see that here.\"});\n  }\n//check if the object is in your inventory and if so, display description in resultMessage\n//if it's not in either, display a resultMessage stating that you couldn't see this object\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// USE  ////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\nuse(subject, object, room) {\n  //set up check variables\n  let subjectInInventory = false;\n  let objectInRoom = false;\n  let objectInInventory = false;\n// check inventory for current item (subject)\n  for (let i = 0; i < pickups.length; i++){\n    if (pickups[i].name === subject){\n      if (pickups[i].inInventory === true){\n        subjectInInventory = true;\n      }\n    }\n  }\n// if obstacle is in current room, check if the subject name matches the obstacles' solve property\n// display the corresponding message and alter the room state and inventory as required\n  if (subjectInInventory === true){\n    //check if the object is also in the INVENTORY first\n    for (let i = 0; i < pickups.length; i++){\n      if (pickups[i].name === object){\n        if (pickups[i].inInventory === true){\n          objectInInventory = true;\n        }\n      }\n    }\n    //then check if it's in the room and if so, solve the puzzle\n    if (room.obstacles.includes(object)){\n      objectInRoom = true;\n      let validSolution = this.checkSolution(subject, object);\n      if (validSolution[0] === \"true\") {\n        this.alterObstacleState(subject, true);\n        this.setState({ resultMessage: validSolution[1]}, () => {\n          let newRoomText = this.compileRoomDescription(room, () => {\n            this.setState({ currentRoomText: newRoomText });\n        });\n\n        });\n      }\n      else if (validSolution[0] === \"false\") {\n        //check if the object is harmful\n        this.checkHarm(validSolution);\n        return;\n      }\n    }\n  }\n\n  if (objectInRoom === false && subjectInInventory === false){\n      this.setState({ resultMessage: \"This isn't in your inventory, and that isn't even here.\" })\n    }\n  else if (objectInRoom === true && subjectInInventory === false){\n    this.setState({ resultMessage: \"This isn't in your inventory.\" });\n    }\n  else if (objectInRoom === false && subjectInInventory === true && objectInInventory === false){\n    this.setState({ resultMessage: \"You can't use this on that, because that isn't here.\" });\n  }\n  else if (objectInInventory === true && subjectInInventory === true && objectInRoom === false){\n    this.setState({ resultMessage: \"This isn't the kind of game that lets you combine items. At least, not yet.\" });\n  }\n}\n//\n\n///////////////////////////////////////////////////////////////////\n// GET  ///////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////\n\n  //If the item is in the room, pick it up (and remove it from the room)\n  get(currentSubject, room) {\n    console.log(\"activating get function for \" + currentSubject);\n    console.log(room.pickups)\n    let itemGot = false;\n    //run through the pickups\n    for (let i = 0; i < room.pickups.length; i++) {\n      if (currentSubject === room.pickups[i]){\n        //update inventory and inInventory status of item\n        console.log(room.pickups);\n        this.setState({ inventory: [...this.state.inventory, room.pickups[i]] });\n        itemGot = true;\n        let pickUpMessage = \"You got the \" + room.pickups[i];\n        this.setState({ resultMessage: pickUpMessage });\n        this.alterPickupState(currentSubject, true);\n        //remove the item from the room.pickups array\n        let itemsArray = room.pickups;\n        console.log(itemsArray);\n        itemsArray = itemsArray.splice(i, 1);\n        console.log(itemsArray);\n        //alter the room's item array and assign the now altered room as the state room\n        for (let j = 0; j < rooms.length; j++){\n          console.log(room.roomId + \" :  \" + rooms[j].roomId);\n          if (room.roomId === rooms[j].roomId){\n            rooms[j].pickups = room.pickups;\n            console.log(rooms[j].pickups);\n            //alter state currentRoom to reflect change\n            this.setState({ currentRoom: rooms[j]}, () => {\n              this.compileRoomDescription(rooms[j]);\n            });\n          }\n        }\n      }\n    }\n    if (itemGot === false){\n      this.setState({ resultMessage: \"You can't get that.\"})\n    }\n  }\n\n  //Check the current room and then find the item in its inventory commandArray\n  findItemIndex(pickupName, room){\n    for (let x = 0; x < rooms.length; x++){\n      if (room.roomId === rooms[x].roomId){\n        for (let y = 0; y < rooms[x].pickups.length; y++){\n          if (rooms[x].pickups[y].name === pickupName){\n            let itemIndex = y;\n            console.log(\"item index is \" + y)\n            return itemIndex;\n          }\n        }\n      }\n    }\n  }\n\n  //Toggle pickup state of selected item\n  alterPickupState(pickupName, newValue) {\n    for (let i = 0; i < pickups.length; i++){\n      if (pickups[i].name === pickupName){\n        pickups[i].inInventory = newValue;\n      }\n    }\n  }\n\n  //Toggle solved state of selected obstacle\n  alterObstacleState(currentSubject, newValue) {\n    console.log(\"alterObstacleState active\");\n    for (let i = 0; i < obstacles.length; i++){\n      if (obstacles[i].solves === currentSubject){\n        obstacles[i].solved = true;\n        console.log(\"alterObstacleState done\");\n      }\n    }\n  }\n\n  //Check if the selected item solves the obstacle\n  checkSolution(currentSubject, currentObject) {\n    console.log(currentSubject + \": \" + currentObject);\n    //find the currentObject\n    //if the currentSubject is specified as its solution, return true\n    for (let i = 0; i < obstacles.length; i++){\n      if (obstacles[i].name === currentObject){\n        console.log(currentSubject + \" tried against \" + obstacles[i].solves);\n        if (obstacles[i].solves === currentSubject){\n          return [\"true\", obstacles[i].solvedAction, i];\n        }\n        else {\n          return [\"false\", obstacles[i].failedAction, i];\n        }\n      }\n    }\n\n  }\n\n///////////////////////////////////////////////////////////////////////////////\n// OTHER //////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n//Put together room description  /////////////////\n//////////////////////////////////////////////////\n\n  compileRoomDescription (room, callback) {\n    let descriptionText = \"\";\n    //Get room description\n    descriptionText = descriptionText + room.description;\n\n    //check available directions - if not NA, then log\n    let validDirections = [];\n    let directions = [\"north\", \"south\", \"east\", \"west\"];\n      for (let i = 0; i < directions.length; i++){\n        if (room.hasOwnProperty(directions[i]) && room[directions[i]][0] !== \"NA\"){\n          //check if there is an obstacle\n            validDirections = [...validDirections, [directions[i], room[directions[i]]]];\n          }\n        }\n        console.log(validDirections);\n\n    for (let i = 0; i < validDirections.length; i++){\n        //For each valid direction, note it in the description.\n        descriptionText = descriptionText + \" To the \" + validDirections[i][0] + \" is \" + validDirections[i][1][2] + \".\";\n        console.log(validDirections[i][0]);\n        //For each valid direction, check if there is an obstacle in its way and log its description into an array\n        let isBlocked = this.validMoveCheck(validDirections[i][0], room)\n        console.log(isBlocked);\n        if (isBlocked[0] === \"blocked\"){\n          descriptionText = descriptionText + \" Blocking the way, you see \" + validDirections[i][1][3] + \".\";\n        }\n    }\n    console.log(descriptionText);\n\n    //List things to look at around the room.\n    if (room.setDressing.length === 0){\n      descriptionText = descriptionText + \" You don't see anything else worth examining.\"\n    }\n    else if (room.setDressing.length === 1){\n      descriptionText = descriptionText + \" You see a \" + room.setDressing[0] + \".\";\n    }\n    else if (room.setDressing.length >= 1){\n      descriptionText = descriptionText + \" You also see \"\n      for (let i = 0; i < room.setDressing.length; i++){\n        if (i === 0){\n          descriptionText = descriptionText + \"a \" + room.setDressing[i];\n        }\n        else if (i >= 1 && i < room.setDressing.length-1){\n          descriptionText = descriptionText + \", a \" + room.setDressing[i];\n        }\n        else if (i >= 1 && i === room.setDressing.length-1){\n          descriptionText = descriptionText + \" and a \" + room.setDressing[i] + \".\";\n        }\n      }\n    }\n\n    //Check for items and list these\n    if (room.pickups.length === 0){\n      descriptionText = descriptionText + \" You don't see anything worth picking up.\"\n    }\n    else if (room.pickups.length === 1){\n      descriptionText = descriptionText + \" Looking for things that might be useful, you see a \" + room.pickups[0] + \".\";\n    }\n    else if (room.pickups.length >= 1){\n      descriptionText = descriptionText + \" Looking for things that might be useful, you also see \"\n      for (let i = 0; i < room.pickups.length; i++){\n        if (i === 0){\n          descriptionText = descriptionText + \"a \" + room.pickups[i];\n        }\n        else if (i >= 1 && i < room.pickups.length-1){\n          descriptionText = descriptionText + \", a \" + room.pickups[i];\n        }\n        else if (i >= 1 && i === room.pickups.length-1){\n          descriptionText = descriptionText + \" and a \" + room.pickups[i] + \".\";\n        }\n      }\n    }\n\n    //setstate the room decsription\n        this.setState({currentRoomText: descriptionText});\n  }\n\n//////////////////////////////////////////////////\n//Put together initial room description  /////////\n//////////////////////////////////////////////////\n\n  //For initial setup - returns text string instead of setState\n  compileInitialRoomDescription (room) {\n    let descriptionText = \"\";\n    //Get room description\n    descriptionText = descriptionText + room.description;\n\n    //check available directions - if not NA, then log\n    let validDirections = [];\n    let directions = [\"north\", \"south\", \"east\", \"west\"];\n      for (let i = 0; i < directions.length; i++){\n        if (room.hasOwnProperty(directions[i]) && room[directions[i]][0] !== \"NA\"){\n          //check if there is an obstacle\n            validDirections = [...validDirections, [directions[i], room[directions[i]]]];\n          }\n        }\n        console.log(validDirections);\n\n    for (let i = 0; i < validDirections.length; i++){\n        //For each valid direction, note it in the description.\n        descriptionText = descriptionText + \"To the \" + validDirections[i][0] + \" is \" + validDirections[i][1][2] + \".\";\n        console.log(validDirections[i][0]);\n        //For each valid direction, check if there is an obstacle in its way and log its description into an array\n        let isBlocked = this.validMoveCheck(validDirections[i][0], room)\n        console.log(isBlocked);\n        if (isBlocked[0] === \"blocked\"){\n          descriptionText = descriptionText + \" Blocking the way, you see \" + validDirections[i][1][3] + \".\";\n        }\n    }\n    console.log(descriptionText);\n\n    //List things to look at around the room.\n    if (room.setDressing.length === 0){\n      descriptionText = descriptionText + \" You don't see anything else worth examining.\"\n    }\n    else if (room.setDressing.length === 1){\n      descriptionText = descriptionText + \" You see a \" + room.setDressing[0] + \".\";\n    }\n    else if (room.setDressing.length >= 1){\n      descriptionText = descriptionText + \" You also see \"\n      for (let i = 0; i < room.setDressing.length; i++){\n        if (i === 0){\n          descriptionText = descriptionText + \"a \" + room.setDressing[i];\n        }\n        else if (i >= 1 && i < room.setDressing.length-1){\n          descriptionText = descriptionText + \", a \" + room.setDressing[i];\n        }\n        else if (i >= 1 && i === room.setDressing.length-1){\n          descriptionText = descriptionText + \" and a \" + room.setDressing[i] + \".\";\n        }\n      }\n    }\n\n    //Check for items and list these\n    if (room.pickups.length === 0){\n      descriptionText = descriptionText + \" You don't see anything worth picking up.\"\n    }\n    else if (room.pickups.length === 1){\n      descriptionText = descriptionText + \" Looking for things that might be useful, you see a \" + room.pickups[0] + \".\";\n    }\n    else if (room.pickups.length >= 1){\n      descriptionText = descriptionText + \" Looking for things that might be useful, you also see \"\n      for (let i = 0; i < room.pickups.length; i++){\n        if (i === 0){\n          descriptionText = descriptionText + \"a \" + room.pickups[i];\n        }\n        else if (i >= 1 && i < room.pickups.length-1){\n          descriptionText = descriptionText + \", a \" + room.pickups[i];\n        }\n        else if (i >= 1 && i === room.pickups.length-1){\n          descriptionText = descriptionText + \" and a \" + room.pickups[i] + \".\";\n        }\n      }\n    }\n\n    //update current room description to include it\n    return descriptionText;\n  }\n\n  //Bring back the obstacle array index corresponding to the relevant obstacle\n  // findObstacleIndex(obstacleName, room){\n  //       for (let j = 0; j < rooms[i].obstacles.length; i++){\n  //         if (rooms[i].obstacles[j].name === obstacleName){\n  //           let itemIndex = j;\n  //           return itemIndex;\n  //         }\n  //       }\n  //     }\n\n  //////////////////////////////////////////////////\n  // Health system  ////////////////////////////////\n  //////////////////////////////////////////////////\n\n  checkHarm (validSolution) {\n    //if failed puzzle is harmful, reduce health by 1\n    //scan obstacle array for obstacle matching room and obstacle name\n    //if harmful, decrement health;\n    if (obstacles[validSolution[2]].failIsHarmful === true){\n        console.log(\"fail is harmful\");\n        let healthLeft = this.state.health;\n        healthLeft--;\n        this.setState({ health: healthLeft });\n        }\n    //if health is 0, end game\n    if (this.state.health === 0){\n      this.setState({ alive: false });\n      this.setState({ resultMessage: validSolution[1] + \" You died. Enter 'restart' to try again.\" });\n    }\n    else {\n      this.setState({ resultMessage: validSolution[1] + \" It hurt. You have \" + this.state.health + \" hits left in you.\"});\n    }\n    //Print status message and disable functions other than restart\n  }\n\n  restartGame() {\n    //restore React state props to initialised states\n    //reset all arrays to original state\n    this.setState({ rooms: this.state.resetRooms });\n    this.setState({ obstacles: this.state.resetRooms });\n    this.setState({ setDressing: this.state.resetSetDressing });\n    this.setState({ pickups: this.state.resetPickups });\n\n    //clear INVENTORY\n    this.setState({ inventory: [] });\n\n    //restore health\n    this.setState({ health: 3 });\n    this.setState({ alive: true });\n\n    //clear user messages\n    this.setState({ resultMessage: \"You restarted the game.\" });\n\n    //place user in initial room\n    this.setState({ currentRoom: rooms[0] });\n    this.setState({ currentRoomText: this.compileInitialRoomDescription(rooms[0]) });\n  }\n\n\n  //Put it all together\n  render() {\n    return (\n      <div className=\"App\">\n        <TextBox currentRoom={this.state.currentRoomText} roomName={this.state.currentRoom.title}/>\n        <Info confirmedUserChoice={this.state.confirmedUserChoice} resultMessage={this.state.resultMessage}/>\n        <UserEntry userInput={this.state.userInput} handleInput={this.handleInput} submitChoice={this.submitChoice} parseEntry={this.parseEntry}/>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}